
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
//import org.eclipse.wb.swt.SWTResourceManager;

//import Cris.SmartCard;

public class MainWindow {

	protected Shell shell;
	private Text txtResponse;

	private String strOSType;

	

	
	public static void main(String[] args) {
		try {

			MainWindow window = new MainWindow();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Open the window.
	 */
	public void open() {
		Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed())
		{
			if (!display.readAndDispatch())
			{
				display.sleep();
			}
		}
	}

	public static byte GetBCC(byte[] p, int n)
	{
		byte ch;
		int i;
		byte crc = (byte) 0x00;

		for (i = 0; i < n; i++) {
			ch = p[i];
			crc = (byte) (ch ^ crc);
		}
		return crc;
	}

	public static String GetErrorDesc(byte byE1, byte byE0) {
		String strRes = "";

		switch (String.format("%02x%02x", byE1, byE0)) {
		case "0000":
			strRes = "Reception of undefined command";
			break;
		case "0001":
			strRes = "Command parameter error";
			break;
		}

		return strRes;
	}

	/**
	 * Create contents of the window.
	 */
	protected void createContents() {
		shell = new Shell();
		shell.setSize(943, 697);
		shell.setText("SWT Application");

		strOSType = System.getProperty("os.name").toLowerCase();
		shell.setLayout(null);

		txtResponse = new Text(shell, SWT.BORDER | SWT.WRAP | SWT.V_SCROLL | SWT.MULTI);
		txtResponse.setBounds(10, 372, 907, 250);
		//txtResponse.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));

		Label lblResponse = new Label(shell, SWT.NONE);
		lblResponse.setBounds(10, 341, 72, 25);
		lblResponse.setText("Response");
		//lblResponse.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));

		Label lblStatus = new Label(shell, SWT.NONE);
		lblStatus.setBounds(10, 628, 44, 18);
		lblStatus.setText("Status-");
		//lblStatus.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));

		Label lblStatusVal = new Label(shell, SWT.NONE);
		lblStatusVal.setBounds(60, 628, 527, 28);
		lblStatusVal.setText("");
		//lblStatusVal.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));

		Button btnClear = new Button(shell, SWT.NONE);
		btnClear.setBounds(698, 336, 219, 30);
		btnClear.setText("Clear");
		//btnClear.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnClear, true, true);

		TabFolder tabFolder = new TabFolder(shell, SWT.NONE);
		tabFolder.setBounds(10, 10, 911, 320);
		//formToolkit.adapt(tabFolder);
		//formToolkit.paintBordersFor(tabFolder);

		TabItem SmartCard = new TabItem(tabFolder, SWT.NONE);
		SmartCard.setText("SmartCard");
	
		
		SmartCard.setText("Card Dispenser");

		Composite composite = new Composite(tabFolder, SWT.NONE);
		SmartCard.setControl(composite);
		//formToolkit.paintBordersFor(composite);
		// cmbBaudRate.setVisible(false);

		Button btnConnectNote = new Button(composite, SWT.NONE);
		btnConnectNote.setBounds(10, 46, 218, 30);
		//btnConnect.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		btnConnectNote.setText("ConnectDevice Note");
		//formToolkit.adapt(btnConnect, true, true);

		Button btnGetNativeLibVersion = new Button(composite, SWT.NONE);
		btnGetNativeLibVersion.setBounds(234, 46, 218, 30);
		btnGetNativeLibVersion.setText("GetNativeLibVersion");
		//btnGetscarddevnativelibversion.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnGetscarddevnativelibversion, true, true);

		Button btnCurrencyFWVersion = new Button(composite, SWT.NONE);
		btnCurrencyFWVersion.setBounds(458, 46, 218, 30);
		btnCurrencyFWVersion.setText("GetCurrencyFWVersion");
		//btnGetscarddevfwversion.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnGetscarddevfwversion, true, true);

		Button btnGetscardreaderfwversion = new Button(composite, SWT.NONE);
		btnGetscardreaderfwversion.setBounds(682, 46, 218, 30);
		btnGetscardreaderfwversion.setText("GetSCardReaderFWVersion");
		//btnGetscardreaderfwversion.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnGetscardreaderfwversion, true, true);

		Button btnDeviceCoin = new Button(composite, SWT.NONE);
		btnDeviceCoin.setBounds(10, 82, 218, 30);
		btnDeviceCoin.setText("ConnectDevice Coin");
		//btnGetdevicestatus.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnGetdevicestatus, true, true);

		Button btnAcceptCurrentCurrency = new Button(composite, SWT.NONE);
		btnAcceptCurrentCurrency.setBounds(234, 82, 218, 30);
		btnAcceptCurrentCurrency.setText("AcceptCurrentCurrency");
		//btnEnablecardacceptance.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnEnablecardacceptance, true, true);

		Button btnDisablecardacceptance = new Button(composite, SWT.NONE);
		btnDisablecardacceptance.setBounds(458, 82, 218, 30);
		btnDisablecardacceptance.setText("DisableCardAcceptance");
		//btnDisablecardacceptance.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnDisablecardacceptance, true, true);

		Button btnRejectcard = new Button(composite, SWT.NONE);
		btnRejectcard.setBounds(458, 118, 218, 30);
		btnRejectcard.setText("RejectCard");
		//btnRejectcard.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnRejectcard, true, true);

		Button btnReturncard = new Button(composite, SWT.NONE);
		btnReturncard.setBounds(234, 118, 218, 30);
		btnReturncard.setText("ReturnCard");
		//btnReturncard.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnReturncard, true, true);

		Button btnDispensecard = new Button(composite, SWT.NONE);
		btnDispensecard.setBounds(10, 118, 218, 30);
		btnDispensecard.setText("DispenseCard");
		//btnDispensecard.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnDispensecard, true, true);

		Button btnIscardinchannel = new Button(composite, SWT.NONE);
		btnIscardinchannel.setBounds(10, 154, 218, 30);
		btnIscardinchannel.setText("IsCardInChannel");
		//btnIscardinchannel.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnIscardinchannel, true, true);

		Button btnIscardremoved = new Button(composite, SWT.NONE);
		btnIscardremoved.setBounds(234, 154, 218, 30);
		btnIscardremoved.setText("IsCardRemoved");
		//btnIscardremoved.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnIscardremoved, true, true);

		Button btnSamslotpoweronoff = new Button(composite, SWT.NONE);
		btnSamslotpoweronoff.setBounds(458, 154, 218, 30);
		btnSamslotpoweronoff.setText("SAMSlotPowerOnOff");
		//btnSamslotpoweronoff.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnSamslotpoweronoff, true, true);

		Button btnXchangeapdu = new Button(composite, SWT.NONE);
		btnXchangeapdu.setBounds(458, 190, 218, 30);
		btnXchangeapdu.setText("XChangeAPDU");
		//btnXchangeapdu.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnXchangeapdu, true, true);

		Button btnDeactivatecard = new Button(composite, SWT.NONE);
		btnDeactivatecard.setBounds(234, 190, 218, 30);
		btnDeactivatecard.setText("DeactivateCard");
		//btnDeactivatecard.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnDeactivatecard, true, true);

		Button btnActivatecard = new Button(composite, SWT.NONE);
		btnActivatecard.setBounds(10, 190, 218, 30);
		btnActivatecard.setText("ActivateCard");
		//btnActivatecard.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnActivatecard, true, true);

		Button btnWriteultralightpage = new Button(composite, SWT.NONE);
		btnWriteultralightpage.setBounds(10, 226, 218, 30);
		btnWriteultralightpage.setText("WriteUltralightPage");
		//btnWriteultralightpage.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnWriteultralightpage, true, true);

		Button btnDisconnectDevice = new Button(composite, SWT.NONE);
		btnDisconnectDevice.setBounds(234, 226, 218, 30);
		btnDisconnectDevice.setText("DisConnectDevice");
		//btnDisconnectDevice.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnDisconnectDevice, true, true);

		Button btnReadultralightblock = new Button(composite, SWT.NONE);
		btnReadultralightblock.setBounds(682, 190, 218, 30);
		btnReadultralightblock.setText("ReadUltralightBlock");
		//btnReadultralightblock.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnReadultralightblock, true, true);

		Button btnResetsam = new Button(composite, SWT.NONE);
		btnResetsam.setBounds(682, 154, 218, 30);
		btnResetsam.setText("ResetSAM");
		//btnResetsam.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnResetsam, true, true);

		Button btnCollectcard = new Button(composite, SWT.NONE);
		btnCollectcard.setBounds(682, 118, 218, 30);
		btnCollectcard.setText("CollectCard");
		//btnCollectcard.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnCollectcard, true, true);

		Button btnAcceptcard = new Button(composite, SWT.NONE);
		btnAcceptcard.setBounds(682, 82, 218, 30);
		btnAcceptcard.setText("AcceptCard");
		//btnAcceptcard.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		//formToolkit.adapt(btnAcceptcard, true, true);

		Button btnCoin = new Button(composite, SWT.RADIO);
		btnCoin.setText("Coin Acceptor");
		//btnCardReaderWriter.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		btnCoin.setBounds(458, 10, 171, 20);
		//formToolkit.adapt(btnCardReaderWriter, true, true);

		Button btnCashAcceptor = new Button(composite, SWT.RADIO);
		btnCashAcceptor.setText("CashAcceptor");
		//btnCardDispenser.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		btnCashAcceptor.setBounds(234, 10, 218, 20);
		//formToolkit.adapt(btnCardDispenser, true, true);
		btnCashAcceptor.setSelection(true);

		Label lblNewLabel = new Label(composite, SWT.NONE);
		//lblNewLabel.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		lblNewLabel.setBounds(10, 10, 179, 20);
		//formToolkit.adapt(lblNewLabel, true, true);
		lblNewLabel.setText("Card Device Type");
		
		Button btnBoth = new Button(composite, SWT.RADIO);
		btnBoth.setText("Both");
		btnBoth.setBounds(656, 10, 171, 20);
		
		TabItem tbtmNewItem = new TabItem(tabFolder, SWT.NONE);
		tbtmNewItem.setText("New Item");
		
		Composite composite_1 = new Composite(tabFolder, SWT.NONE);
		tbtmNewItem.setControl(composite_1);
		
		Button btnNewButton = new Button(composite_1, SWT.NONE);
		btnNewButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
			}
		});
		btnNewButton.setBounds(184, 47, 158, 46);
		btnNewButton.setText("New Button");
		
		Button button = new Button(composite_1, SWT.NONE);
		button.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
			}
		});
		button.setText("New Button");
		button.setBounds(355, 49, 158, 46);
		
		Button button_1 = new Button(composite_1, SWT.NONE);
		button_1.setText("New Button");
		button_1.setBounds(533, 49, 158, 46);
		
		
		// formToolkit.adapt(btnBlock, true, true);

		// Open button functioning
		btnConnectNote.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				
			}
		});

		// Clear button functioning
		btnClear.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					txtResponse.setText("");
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnGetNativeLibVersion.addSelectionListener(new SelectionAdapter()
		{
			@Override
			public void widgetSelected(SelectionEvent e) 
			{
				try
				{
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true)
					{
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					}
					else
					{
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}

				}
				catch (Exception e1)
				{
					e1.printStackTrace();
				}
			}
		});

		btnCurrencyFWVersion.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("GetSCardDevFWVersion\r\n");

					String strRet = "";

					if (btnCashAcceptor.getSelection() == true) {
						strRet = objSmartCardDispenser.GetSCardDevFWVersion();
					} else {
						strRet = objSmartCardReaderWriter.GetSCardDevFWVersion();
					}
					txtResponse.append("\r\nReturn value- " + strRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnGetscardreaderfwversion.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("GetSCardReaderFWVersion\r\n");

					String strRet = "";
					if (btnCashAcceptor.getSelection() == true) {
						strRet = objSmartCardDispenser.GetSCardReaderFWVersion();
					} else {
						strRet = objSmartCardReaderWriter.GetSCardReaderFWVersion();
					}
					txtResponse.append("\r\nReturn value- " + strRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnDeviceCoin.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e)
			{
				
				
			}
		});

		btnAcceptCurrentCurrency.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("EnableCardAcceptance\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.EnableCardAcceptance(10000);
					} else {
						iRet = objSmartCardReaderWriter.EnableCardAcceptance(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnDisablecardacceptance.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("DisableCardAcceptance\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.DisableCardAcceptance(10000);
					} else {
						iRet = objSmartCardReaderWriter.DisableCardAcceptance(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnAcceptcard.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("AcceptCard\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.AcceptCard(10000);
					} else {
						iRet = objSmartCardReaderWriter.AcceptCard(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnDispensecard.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("DispenseCard\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.DispenseCard(10000);
					} else {
						iRet = objSmartCardReaderWriter.DispenseCard(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnReturncard.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("ReturnCard\r\n");

					DispenseModeDB objDispenseModeDB = new DispenseModeDB();
					objDispenseModeDB.open();
					if (objDispenseModeDB.bFormResult) {
						txtResponse.append("\r\nDispense Mode- " + objDispenseModeDB.iDispenseModeSelected);

						int iRet = -1;
						if (btnCashAcceptor.getSelection() == true) {
							iRet = objSmartCardDispenser.ReturnCard(objDispenseModeDB.iDispenseModeSelected, 10000);
						} else {
							iRet = objSmartCardReaderWriter.ReturnCard(objDispenseModeDB.iDispenseModeSelected, 10000);
						}
						txtResponse.append("\r\nReturn value- " + iRet);
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnRejectcard.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("RejectCard\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.RejectCard(10000);
					} else {
						iRet = objSmartCardReaderWriter.RejectCard(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnCollectcard.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("CollectCard\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.CollectCard(10000);
					} else {
						iRet = objSmartCardReaderWriter.CollectCard(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnIscardinchannel.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("IsCardInChannel\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.IsCardInChannel(10000);
					} else {
						iRet = objSmartCardReaderWriter.IsCardInChannel(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnIscardremoved.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("IsCardRemoved\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.IsCardRemoved(10000);
					} else {
						iRet = objSmartCardReaderWriter.IsCardRemoved(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnSamslotpoweronoff.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("SAMSlotPowerOnOff\r\n");

					SAMSlotDB objSAMSlotDB = new SAMSlotDB();
					objSAMSlotDB.open();
					if (objSAMSlotDB.bFormResult) {
						txtResponse.append("\r\nSAM Slot- " + objSAMSlotDB.iSAMSlot + "\r\nPowerOnOffState- "
								+ objSAMSlotDB.iPowerState);

						int iRet = -1;
						if (btnCashAcceptor.getSelection() == true) {
							iRet = objSmartCardDispenser.SAMSlotPowerOnOff(objSAMSlotDB.iSAMSlot,
									objSAMSlotDB.iPowerState, 10000);
						} else {
							iRet = objSmartCardReaderWriter.SAMSlotPowerOnOff(objSAMSlotDB.iSAMSlot,
									objSAMSlotDB.iPowerState, 10000);
						}
						txtResponse.append("\r\nReturn value- " + iRet);
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnResetsam.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("ResetSAM\r\n");

					ResetSAMDB objResetSAMDB = new ResetSAMDB();
					objResetSAMDB.open();
					if (objResetSAMDB.bFormResult) {
						txtResponse.append("\r\nSAM Slot- " + objResetSAMDB.iSAMSlot + "\r\nReset Type- "
								+ objResetSAMDB.iResetType);

						byte[] byRet = null;
						if (btnCashAcceptor.getSelection() == true) {
							byRet = objSmartCardDispenser.ResetSAM(objResetSAMDB.iSAMSlot, objResetSAMDB.iResetType,
									10000);
						} else {
							byRet = objSmartCardReaderWriter.ResetSAM(objResetSAMDB.iSAMSlot, objResetSAMDB.iResetType,
									10000);
						}
						txtResponse.append("\r\nReturn value- ");
						for (int i = 0; i < byRet.length; i++) {
							txtResponse.append(byRet[i] + " ");
						}
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnActivatecard.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) 
			{
				try
				{
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} 
					else
					{
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("ActivateCard\r\n");

					ActivateCardDB objActivateCardDB = new ActivateCardDB();
					objActivateCardDB.open();
					if (objActivateCardDB.bFormResult) {
						txtResponse.append("\r\nCard Type- " + objActivateCardDB.iCardType + "\r\nSAM Slot- "
								+ objActivateCardDB.iSAMSlot);

						byte[] byRet = null;
						if (btnCashAcceptor.getSelection() == true) {
							byRet = objSmartCardDispenser.ActivateCard(objActivateCardDB.iCardType,
									objActivateCardDB.iSAMSlot, 10000);
						} else {
							byRet = objSmartCardReaderWriter.ActivateCard(objActivateCardDB.iCardType,
									objActivateCardDB.iSAMSlot, 10000);
						}
						txtResponse.append("\r\nReturn value- ");
						for (int i = 0; i < byRet.length; i++) {
							txtResponse.append(byRet[i] + " ");
						}
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnDeactivatecard.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("DeactivateCard\r\n");

					ActivateCardDB objActivateCardDB = new ActivateCardDB();
					objActivateCardDB.open();
					if (objActivateCardDB.bFormResult) {
						txtResponse.append("\r\nCard Type- " + objActivateCardDB.iCardType + "\r\nSAM Slot- "
								+ objActivateCardDB.iSAMSlot);

						int iRet = -1;
						if (btnCashAcceptor.getSelection() == true) {
							iRet = objSmartCardDispenser.DeactivateCard(objActivateCardDB.iCardType,
									objActivateCardDB.iSAMSlot, 10000);
						} else {
							iRet = objSmartCardReaderWriter.DeactivateCard(objActivateCardDB.iCardType,
									objActivateCardDB.iSAMSlot, 10000);
						}
						txtResponse.append("\r\nReturn value- " + iRet);
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnXchangeapdu.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("XChangeAPDU\r\n");

					XChangeApduDB objXChangeApduDB = new XChangeApduDB();
					objXChangeApduDB.open();
					if (objXChangeApduDB.bFormResult) {
						txtResponse.append("\r\nCard Type- " + objXChangeApduDB.iCardType + "\r\nSAM Slot- "
								+ objXChangeApduDB.iSAMSlot + "\r\nAPDU- " + objXChangeApduDB.strAPDU);

						byte[] byHexAPDU = hexStringToByteArray(objXChangeApduDB.strAPDU);

						byte[] byRet = null;
						if (byHexAPDU != null) {
							if (btnCashAcceptor.getSelection() == true) {
								byRet = objSmartCardDispenser.XChangeAPDU(objXChangeApduDB.iCardType, byHexAPDU,
										objXChangeApduDB.iSAMSlot, 10000);
							} else {
								byRet = objSmartCardReaderWriter.XChangeAPDU(objXChangeApduDB.iCardType, byHexAPDU,
										objXChangeApduDB.iSAMSlot, 10000);
							}
							txtResponse.append("\r\nReturn value- ");
							for (int i = 0; i < byRet.length; i++) {
								txtResponse.append(byRet[i] + " ");
							}
						} else {
							txtResponse.append("\r\nAPDU not proper");
						}
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnReadultralightblock.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("ReadUltralightBlock\r\n");

					ReadUltraLightDB objReadUltraLightDB = new ReadUltraLightDB();
					objReadUltraLightDB.open();
					if (objReadUltraLightDB.bFormResult) {
						txtResponse.append("\r\nAddress- " + objReadUltraLightDB.iAddress);

						byte[] byRet = null;
						if (btnCashAcceptor.getSelection() == true) {
							byRet = objSmartCardDispenser.ReadUltralightBlock(objReadUltraLightDB.iAddress, 10000);
						} else {
							byRet = objSmartCardReaderWriter.ReadUltralightBlock(objReadUltraLightDB.iAddress, 10000);
						}
						txtResponse.append("\r\nReturn value- ");
						for (int i = 0; i < byRet.length; i++) {
							txtResponse.append(byRet[i] + " ");
						}
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnWriteultralightpage.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("WriteUltralightPage\r\n");

					WriteUltraLightDB objWriteUltraLightDB = new WriteUltraLightDB();
					objWriteUltraLightDB.open();
					if (objWriteUltraLightDB.bFormResult) {
						txtResponse.append("\r\nAddress- " + objWriteUltraLightDB.iAddress + "\r\nAPDU- "
								+ objWriteUltraLightDB.strAPDU);

						byte[] byHexAPDU = hexStringToByteArray(objWriteUltraLightDB.strAPDU);

						int iRet = -1;
						if (byHexAPDU != null) {
							if (btnCashAcceptor.getSelection() == true) {
								iRet = objSmartCardDispenser.WriteUltralightPage(objWriteUltraLightDB.iAddress,
										byHexAPDU, 10000);
							} else {
								iRet = objSmartCardReaderWriter.WriteUltralightPage(objWriteUltraLightDB.iAddress,
										byHexAPDU, 10000);
							}
							txtResponse.append("\r\nReturn value- " + iRet);
						} else {
							txtResponse.append("\r\nAPDU not proper");
						}
					} else {
						txtResponse.append("\r\nParameter not valid");
					}
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

		btnDisconnectDevice.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					lblStatusVal.setText("");

					if (btnCashAcceptor.getSelection() == true) {
						txtResponse.setText("*** Cash Dispenser ***\r\n");
					} else {
						txtResponse.setText("*** Cash Reader Writer ***\r\n");
					}
					txtResponse.append("DisConnectDevice\r\n");

					int iRet = -1;
					if (btnCashAcceptor.getSelection() == true) {
						iRet = objSmartCardDispenser.DisConnectDevice(10000);
					} else {
						iRet = objSmartCardReaderWriter.DisConnectDevice(10000);
					}
					txtResponse.append("\r\nReturn value- " + iRet);
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});
	}

	public static byte[] hexStringToByteArray(String s) {
		try {
			byte[] b = new byte[s.length() / 2];
			for (int i = 0; i < b.length; i++) {
				int index = i * 2;
				int v = Integer.parseInt(s.substring(index, index + 2), 16);
				b[i] = (byte) v;
			}
			return b;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
}
