import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;

import com.mei.bnr.enums.IntermediateStackerStatus;
import com.mei.bnr.enums.SafeDoorStatus;
import com.mei.bnr.enums.TransportStatus;

import jssc.SerialPort;
import jssc.SerialPortList;

public class TestRun 
{
	private static SerialPort serialPort = null;

	public static void main(String[] args) 
	{
		try 
		{
	    	 
			Printer objRP=new Printer();
			UPS objUPS=new UPS();
			TokenDispenser objToken=new TokenDispenser();
			Security objSec=new Security();
			BNRCD objBNR=new BNRCD();
			while(true)
			{
				System.out.println("Please Select Device For Testing");
				System.out.println("1. Receipt Printer");
				System.out.println("2. UPS");
				System.out.println("3. Token Dispenser");
				System.out.println("4. Security");
				System.out.println("5. NoteCoinUtility");
				Scanner in =new Scanner(System.in);
				int a = in.nextInt(); 
				switch (a)
				{
				case 1: RpLoop:while(true)
						{
					        System.out.println("Select The Option For The Receipt Printer");
							System.out.println("1.  Connect Device");
							System.out.println("2.  GetPrinterFWVersion");
							System.out.println("3.  GetNativeLibVersion ");
							System.out.println("4.  StartPrint");
							System.out.println("5.  StopPrint");
							System.out.println("6.  Print Logo");
							System.out.println("7.  GetPrinterStatus");
							System.out.println("8.  Print Text Line");
							System.out.println("9.  Print Blank Line");
							System.out.println("10. Exchange Command");
							System.out.println("11. Disconnect Device");
							System.out.println("12. EXIT to Main Menu");
							//Scanner s = new Scanner(System.in); 
							/*int k=0;
							if(s.hasNext())
								k = s.nextInt(); */
							 BufferedReader reader =  
					                   new BufferedReader(new InputStreamReader(System.in)); 
							int k=Integer.parseInt(reader.readLine()); 
							
							switch (k)
							{      
							 case 1:
								
								try {
									String[] strPortNames = SerialPortList.getPortNames();

									for(int iIndex = 0; iIndex < strPortNames.length; iIndex++)
									{
										System.out.println((iIndex + 1) + ")" + strPortNames[iIndex]);
									}
									
									
									System.out.print("Select the serial port- ");
									 BufferedReader readerCom =  
							                   new BufferedReader(new InputStreamReader(System.in)); 
									
									String iPortNoSelected=readerCom.readLine();
									
									
									
									
									System.out.println("Port selected- " + iPortNoSelected);
									System.out.println("ConnectDevice Response:- "+objRP.ConnectDevice(iPortNoSelected, 100));
								} 
								catch (Exception e)
								{
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								break;
							case 2:
								  System.out.println("GetPrinterFWVersion Response:- "+objRP.GetPrinterFWVersion());
								break;
							case 3:
								 System.out.println("GetNativeLibVersion Response:- "+objRP.GetNativeLibVersion());
								break;
							case 4:
								 System.out.println("StartPrint Response:- "+objRP.StartPrint(100));
								break;
							case 5:
								 System.out.println("EndPrint Response:- "+objRP.EndPrint(0, 100));
								break;
							case 6:
								 byte[] logo=Files.readAllBytes(Paths.get("Rasternormal.txt"));
								 System.out.println("PrintLogo Response:- "+objRP.PrintLogo(logo, 0, 100));
								break;
							case 7:
								 System.out.println("GetPrinterStatus Response:- "+objRP.GetPrinterStatus(100));
								break;
							case 8:
								 System.out.println("PrintTextLine Response:- "+objRP.PrintTextLine("Welcome To Lipi Data System \n This is an Sample Receipt\n Lipi team", 0, 100));
								break;
							case 9:
								 System.out.println("PrintBlankLine Response:- "+objRP.PrintBlankLine(100));
								break;
							case 10:
								 System.out.println("XChangeCommande Response:- "+objRP.XChangeCommande("", 100));
								break;
							case 11:
								 System.out.println("DisConnectDevice Response:- "+objRP.DisConnectDevice(100));
								break;
							case 12:
								break RpLoop;

							default:
								break;
							}
						}
					
					
			    case 2: UpsTool:while(true)
				        {
				        	System.out.println("Select The Option For The UPS");
							System.out.println("1.  Connect Device");
							System.out.println("2.  GetPrinterFWVersion");
							System.out.println("3.  GetNativeLibVersion ");
							System.out.println("4.  GetUpsStatus");
							System.out.println("5.  GetBatteryStatus");
							System.out.println("6.  DisconectDevice");
							System.out.println("7.  Exit to Main Menu");

							BufferedReader reader =  
					                   new BufferedReader(new InputStreamReader(System.in)); 
							int k=Integer.parseInt(reader.readLine()); 
							switch (k)
							{      
							case 1:
			
								try {
									String[] strPortNames = SerialPortList.getPortNames();

									for(int iIndex = 0; iIndex < strPortNames.length; iIndex++)
									{
										System.out.println((iIndex + 1) + ")" + strPortNames[iIndex]);
									}
									
									
									System.out.print("Select the serial port- ");
									BufferedReader readerComUPS =  
									           new BufferedReader(new InputStreamReader(System.in)); 
									
									String iPortNoSelected=readerComUPS.readLine();
									
									
									System.out.println("Port selected- " + iPortNoSelected);
									System.out.println("ConnectDevice Response:- "+objUPS.ConnectDevice(iPortNoSelected, 100));
								}
								catch (Exception e) 
								{
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							
								break;
							case 2:
								  System.out.println("GetUPSFWVersion Response:- "+objUPS.GetUPSFWVersion());
								break;
							case 3:
								 System.out.println("GetNativeLibVersion Response:- "+objUPS.GetNativeLibVersion());
								break;
							case 4:
								  System.out.println("GetUpsStatus Response:- "+objUPS.GetUPStatus());
								break;
							case 5:
								 System.out.println("GetBatteryStatus Response:- "+objUPS.GetBatteryStatus());
								break;
							case 6:
								 System.out.println("Disconnect Response:- "+objUPS.DisConnectDevice(100));
								break;
							case 7:
								break UpsTool;
								
							}
							
				        }
							
			    case 3:
			    	TokenLoop:while(true)
					{
				        System.out.println("Select The Option For The Receipt Printer");
						System.out.println("1.  Connect Device");
						System.out.println("2.  GetTokenDispenserFWVersion");
						System.out.println("3.  GetNativeLibVersion ");
						System.out.println("4.  GetTokenDispenserReaderFWVersion");
						System.out.println("5.  GetDeviceStatus");
						System.out.println("6.  DispenseToken");
						System.out.println("7.  EmptyTokenBox");
						System.out.println("8.  ClearJammedToken");
						System.out.println("9.  Disconnect Device");
						System.out.println("10. EXIT to Main Menu");
						//Scanner s = new Scanner(System.in); 
						/*int k=0;
						if(s.hasNext())
							k = s.nextInt(); */
						 BufferedReader reader =  
				                   new BufferedReader(new InputStreamReader(System.in)); 
						int k=Integer.parseInt(reader.readLine()); 
						
						switch (k)
						{      
						 case 1:
							System.out.println("ConnectDevice Response:- "+objRP.ConnectDevice("", 100));
							break;
					 	 case 2:
							  System.out.println("GetTokenDispenserFWVersion Response:- "+objToken.GetTokenDispenserFWVersion());
							break;
						 case 3:
							 System.out.println("GetNativeLibVersion Response:- "+objToken.GetNativeLibVersion());
							break;
						 case 4:
							  System.out.println("GetTokenDispenserReaderFWVersion Response:- "+objToken.GetTokenDispenserReaderFWVersion());
							break;
						 case 5:
							 System.out.println("GetDeviceStatus Response:- "+objToken.GetDeviceStatus());
							break;
						 case 6:
							 System.out.println("Dispense Response:- "+objToken.Dispence(2, 50));
							break;
						 case 7:
							 System.out.println("EmptyTokenBox Response:- "+objToken.EmptyTokenBox(1, 0, 100));
							break;
						 case 8:
							 System.out.println("ClearJammedToken Response:- "+objToken.ClearJammedToken(1, 0, 100));
							break;
						 case 9:
							 System.out.println("Disconnect Response:- "+objToken.DisConnectDevice(100));
							break;
						 case 10:
							break TokenLoop; 
						

						 default:
							break;
						}
					}
				
			 
			       
			    case 4:
			    	 SecurityTool:while(true)
				        {
				        	System.out.println("Select The Option For The UPS");
							System.out.println("1.  Connect Device");
							System.out.println("2.  GetPrinterFWVersion");
							System.out.println("3.  GetNativeLibVersion ");
							System.out.println("4.  GetUpsStatus");
							System.out.println("5.  GetBatteryStatus");
							System.out.println("6.  DisconectDevice");
							System.out.println("7.  Exit to Main Menu");

							BufferedReader reader =  
					                   new BufferedReader(new InputStreamReader(System.in)); 
							int k=Integer.parseInt(reader.readLine()); 
							switch (k)
							{      
							case 1:
			
								try {
									String[] strPortNames = SerialPortList.getPortNames();

									for(int iIndex = 0; iIndex < strPortNames.length; iIndex++)
									{
										System.out.println((iIndex + 1) + ")" + strPortNames[iIndex]);
									}
									
									
									System.out.print("Select the serial port- ");
									BufferedReader readerComUPS =  
									           new BufferedReader(new InputStreamReader(System.in)); 
									
									String iPortNoSelected=readerComUPS.readLine();
									
									
									System.out.println("Port selected- " + iPortNoSelected);
									System.out.println("ConnectDevice Response:- "+objSec.ConnectDevice(iPortNoSelected, 100));
								}
								catch (Exception e) 
								{
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							
								break;
							case 2:
								  System.out.println("GetSecurityFWVersion Response:- "+objSec.GetSecurityDevFWVersion());
								break;
							case 3:
								 System.out.println("GetNativeLibVersion Response:- "+objSec.GetNativeLibVersion());
								break;
							case 4:
								  System.out.println("GetSecurityDoorStatus Response:- "+objSec.GetSecurityDoorStatus(1));
								break;
							case 5:
								 System.out.println("DisableAlarm Response:- "+objSec.DisableAlarm(1, 0));
								break;
							case 6:
								 System.out.println("Disconnect Response:- "+objSec.DisConnectDevice(100));
								break;
							case 7:
								break SecurityTool;
								
							}
							
				        }
				      System.exit(0);
				break;
				
				
			    case 5:
			    	BnrCoinLoop:while(true)
					{
				        System.out.println("Select The Option For The Receipt Printer");
						System.out.println("1.  Connect Device Note");
						System.out.println("2.  Connect Device Coin");
						System.out.println("3.  GetNativeLibVersion ");
						System.out.println("4.  GetCurrencyDevFWVersion");
						System.out.println("5.  GetValidCurrency Note");
						System.out.println("6.  GetValidCurrency Coin");
						System.out.println("7.  AcceptCurreny Note");
						System.out.println("8.  AcceptCurrency Coin");
						System.out.println("9.  ReturnCurrency Note");
						System.out.println("10. ReturnCurrency Coin");
						System.out.println("11. GetDeviceStatus Note");
						System.out.println("12. GetDeviceStatus Coin");
						System.out.println("13. IsNotRemoved");
						System.out.println("14. StackAcceptedCurrencies");
						
						//Scanner s = new Scanner(System.in); 
						/*int k=0;
						if(s.hasNext())
							k = s.nextInt(); */
						 BufferedReader reader =  
				                   new BufferedReader(new InputStreamReader(System.in)); 
						int k=Integer.parseInt(reader.readLine()); 
						
						switch (k)
						{      
						 case 1:
							System.out.println("Connect Device Note Response:- "+objBNR.ConnectDevice(51, 0, 0,1, 1,100));
							break;
					 	 case 2:
					 		System.out.println("Connect Device Coin Response:- "+objBNR.ConnectDevice(0, 0, 0,2, 0,100));
							break;
						 case 3:
							 System.out.println("GetNativeLibVersion Response:- "+objBNR.GetNativeLibVersion());
							break;
						 case 4:
							  System.out.println("GetCurrencyDevFWVersion Response:- "+objBNR.GetCurrencyDevFWVersion(1));
							break;
						 case 5:
							 System.out.println("Enter Amount Note to Validate:- ");
							 BufferedReader readerNote =  
			                   new BufferedReader(new InputStreamReader(System.in)); 
					           int n=Integer.parseInt(readerNote.readLine());
							  System.out.println("GetValidCurrency Note Response:- "+objBNR.GetValidCurrency(1,n,100));
							break;
						 case 6:
							 // System.out.println("Enter Amount Coin to Validate:- ");
							 //BufferedReader readerCoin =  
			                 // new BufferedReader(new InputStreamReader(System.in)); 
					         //  int c=Integer.parseInt(readerCoin.readLine());
							  System.out.println("GetValidCurrency Coin Response:- "+objBNR.GetValidCurrency(2,5,100));
							break;
						 case 7:
							 System.out.println("AcceptCurrency Note Response:- "+objBNR.AcceptCurrentCurrency(1, 0, 100));
							break;
						 case 8:
							 System.out.println("AcceptCurrency Coin Response:- "+objBNR.AcceptCurrentCurrency(2, 0, 100));
							break;
						 case 9:
							 System.out.println("ReturnCurrecy Note Response:- "+objBNR.ReturnCurrentCurrency(1, 100));
							break;
						 case 10:
							 System.out.println("ReturnCurrecy Coin Response:- "+objBNR.ReturnCurrentCurrency(2, 100));
							break; 
						 case 11:
							 byte[] res=objBNR.DeviceStatus(1,100);
							 for (int i = 0; i < res.length; i++) {
								System.out.print(res[i]+"\t");
							}
							 System.out.println("Device Status NoteResponse:- "+res);
							break;
						 case 12:
							 byte[] res1=objBNR.DeviceStatus(2,100);
							 for (int i = 0; i < res1.length; i++) {
								System.out.print(res1[i]+"\t");
							}
							 System.out.println("Device Status CoinResponse:- "+res1);
							break;
						 case 13:
							
							 System.out.println("IsNotRemoved Response:- "+objBNR.IsNoteRemoved(100));
							break;
						 case 14:
							 System.out.println("StackAcceptedCurrency Response:- "+objBNR.StackAcceptedCurrencies(100));
							break;
						 case 15:
							 System.out.println("ClearJammedCurrency Response:- "+objBNR.ClearJammedCurrencies(1, 0, 100));
							break;
						 default:
							break;
						}
					}
				

				default:
					break;
				}
			}
		}
		catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}

}
