

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import jssc.SerialPort;
import jssc.SerialPortException;

public class PrintingAnyLogo 
{
	 public static SerialPort printPort;
	 //private final static char ESC_CHAR = 0x1B;
	 private final static byte[] SET_LINE_SPACE_24 = new byte[]{0x1B, 0x33, 24};
	 private final static byte[] SELECT_BIT_IMAGE_MODE = {0x1B, 0x2A, 33};
	 private final static byte[] SET_LINE_SPACE_30 = new byte[]{0x1B, 0x33, 30};
	 public static byte[] FEED_LINE = {10};
	 
	 public static void main(String[] args)
	 {
		try 
		{
			printPort = new SerialPort("COM6");
			if(printPort.openPort() == true)
            {
            	
            	printPort.setParams(SerialPort.BAUDRATE_38400, 	//SerialPort.BAUDRATE_9600,
	                                 SerialPort.DATABITS_8,
	                                 SerialPort.STOPBITS_1,
	                                 SerialPort.PARITY_NONE);		
            }
			BufferedImage bi =(BufferedImage) ImageIO.read(new File("c:\\LipiID140319.png"));
			int[][] pixels = getPixelsSlow(bi);
			printImage(pixels);
		}
		catch (IOException | SerialPortException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 }


	private static int[][] getPixelsSlow(BufferedImage image)
	{
	    int width = image.getWidth();
	    int height = image.getHeight();
	    int[][] result = new int[height][width];
	    for (int row = 0; row < height; row++)
	    {
	        for (int col = 0; col < width; col++)
	        {
	            result[row][col] = image.getRGB(col, row);
	        }
	    }
	    return result;
	}

   private static void printImage(int[][] pixels) 
   {
	 try 
	 {
		 printPort.writeBytes(SET_LINE_SPACE_24);
		 for (int y = 0; y < pixels.length; y += 24)
		 {
		   printPort.writeBytes(SELECT_BIT_IMAGE_MODE);
		   printPort.writeBytes(new byte[]{(byte)(0x00ff & pixels[y].length)
		                             , (byte)((0xff00 & pixels[y].length) >> 8)});
		   for (int x = 0; x < pixels[y].length; x++)
		   {
		     printPort.writeBytes(recollectSlice(y, x, pixels));
		   }

		   printPort.writeBytes(FEED_LINE);
		 }
		   printPort.writeBytes(SET_LINE_SPACE_30);
		   
		   Thread.sleep(500);
		   byte[] status = new byte[]{ 0x1B, 0x69 };
           printPort.writeBytes(status);
	 } 
	 catch (SerialPortException | InterruptedException e)
	 {
		e.printStackTrace();
	 }
	}

	private static byte[] recollectSlice(int y, int x, int[][] img)
	{
	    byte[] slices = new byte[] {0, 0, 0};
	    for (int yy = y, i = 0; yy < y + 24 && i < 3; yy += 8, i++) 
	    {
	        byte slice = 0;
	        for (int b = 0; b < 8; b++) 
	        {
	            int yyy = yy + b;
	            if (yyy >= img.length)
	            {
	              continue;
	            }
		        int col = img[yyy][x]; 
		        boolean v = shouldPrintColor(col);
		        slice |= (byte) ((v ? 1 : 0) << (7 - b));
	        }
	        slices[i] = slice;
	    }
	    return slices;
	}

	private static boolean shouldPrintColor(int col)
	{
	    final int threshold = 127;
	    int a, r, g, b, luminance;
	    a = (col >> 24) & 0xff;
	    if (a != 0xff) 
	    {// Ignore transparencies
	        return false;
	    }
	    r = (col >> 16) & 0xff;
	    g = (col >> 8) & 0xff;
	    b = col & 0xff;
	    luminance = (int) (0.299 * r + 0.587 * g + 0.114 * b);

	    return luminance < threshold;
	 }
	}
	